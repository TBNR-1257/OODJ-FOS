package com.mycompany.fos_app.GUI;

import java.io.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class PlaceOrder extends javax.swing.JFrame {
    
    private String idInput;

    private String vendorID;
    
    private CustomerHome custHome;
    
    public PlaceOrder(String vendorID, CustomerHome custHome) {
    String idInput = SessionManager.getInstance().getidInput();
    this.vendorID = vendorID;
    this.custHome = custHome;  // Save the CustomerHome reference
    initComponents();
    loadVendorDetails();
    loadMenuItems();
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        numbertxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addtxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        optioncombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemstable = new javax.swing.JTable();
        placeorderbtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        totaltxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        backbtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        ordersummlabel = new javax.swing.JLabel();
        vendorName = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Place Order");

        jLabel3.setText("Contact Number");

        jLabel4.setText("Address");

        jLabel5.setText("Delivery Option");

        optioncombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Delivery", "Pick-up", "Dine-in" }));

        itemstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Description", "Price", "Item Type", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemstable);
        if (itemstable.getColumnModel().getColumnCount() > 0) {
            itemstable.getColumnModel().getColumn(2).setPreferredWidth(250);
        }
        // Enable multiple row selection in the table
        itemstable.setRowSelectionAllowed(true);
        itemstable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        // Add a selection listener to update order summary when rows are selected
        itemstable.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting()) {  // Prevents firing twice for a single selection
                updateOrderSummary();
            }
        });

        placeorderbtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        placeorderbtn.setText("Place Order");
        placeorderbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeorderbtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Total");

        totaltxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totaltxtActionPerformed(evt);
            }
        });

        jLabel7.setText("NOTE: additional RM5 will be added if you choose delivery!");

        backbtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        backbtn.setText("Back");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        jLabel8.setText("Order Summary");

        ordersummlabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        vendorName.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel9.setText("Menu for");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(412, 412, 412)
                .addComponent(placeorderbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(optioncombo, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totaltxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(ordersummlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vendorName, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numbertxt, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vendorName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numbertxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optioncombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ordersummlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totaltxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(placeorderbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void placeorderbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeorderbtnActionPerformed
        placeOrder();
    }//GEN-LAST:event_placeorderbtnActionPerformed

    private void totaltxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totaltxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totaltxtActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        custHome.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backbtnActionPerformed

    private void loadVendorDetails() {
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/com/mycompany/fos_app/Data/vendor.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(";");
                if (data.length >= 4 && data[0].equals(vendorID)) {
                    vendorName.setText(data[2]); // Set vendor name
                    break; // Stop searching after finding the vendor
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
private void loadMenuItems() {
    DefaultTableModel model = (DefaultTableModel) itemstable.getModel();
    model.setRowCount(0); // Clear existing rows

    try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/com/mycompany/fos_app/Data/menu.txt"))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] data = line.split(";");  // Splitting the data based on the delimiter

            // Check if the vendor ID matches and if the availability is "Yes"
            if (data.length >= 7 && data[6].equals(vendorID) && "Yes".equals(data[5])) {  // Check if vendorID and availability match
                // Assuming the format is: itemID;itemName;itemDescription;price;category;availability;vendorID
                Object[] row = new Object[] {
                    data[0],  // Item ID
                    data[1],  // Item Name
                    data[2],  // Item Description
                    data[3],  // Price
                    data[4],  // Item Category
                    data[5]   // Availability (Yes/No)
                };
                model.addRow(row);  // Add the row to the table model
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

        
private void deliveryFee() {
    String option = (String) optioncombo.getSelectedItem();
    double total = 0;
    for (int i = 0; i < itemstable.getRowCount(); i++) {
     total += Double.parseDouble(itemstable.getValueAt(i, 3).toString());
    }
    if ("Delivery".equals(option)) {
     total += 5;
    }
    JOptionPane.showMessageDialog(this, "Total: RM" + total, "Order Total", JOptionPane.INFORMATION_MESSAGE);
    }  
    
private void placeOrder() {
    // Retrieve the customer ID (idInput) using SessionManager
    String idInput = SessionManager.getInstance().getidInput();
    if (idInput == null || idInput.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Customer ID is missing! Please log in first.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Fetch customer name based on the ID (You can implement a similar method like getCustomerNameById())
    String customerName = getCustomerNameById(idInput); 
    if (customerName == null || customerName.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Customer not found for ID: " + idInput, "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Proceed with collecting other details
    String contactNumber = numbertxt.getText().trim();
    String address = addtxt.getText().trim();
    String deliveryOption = optioncombo.getSelectedItem().toString();

    if (contactNumber.isEmpty() || address.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all details!");
        return;
    }

    int[] selectedRows = itemstable.getSelectedRows();
    if (selectedRows.length == 0) {
        JOptionPane.showMessageDialog(this, "Please select at least one item!");
        return;
    }

    String orderID = generateOrderID();
    DefaultTableModel model = (DefaultTableModel) itemstable.getModel();
    StringBuilder itemsOrdered = new StringBuilder();
    double totalPrice = 0.0;

    // Iterate over selected rows and calculate total price
    for (int row : selectedRows) {
        String itemName = model.getValueAt(row, 1).toString();
        String priceStr = model.getValueAt(row, 3).toString();

        try {
            double price = Double.parseDouble(priceStr);
            totalPrice += price;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid price format for item: " + itemName);
            return;
        }

        if (itemsOrdered.length() > 0) {
            itemsOrdered.append(", ");
        }
        itemsOrdered.append(itemName).append(" x1");
    }

    if ("Delivery".equals(deliveryOption)) {
        totalPrice += 5.0;  // Adding delivery fee if applicable
    }

    totaltxt.setText(String.format("%.2f", totalPrice));

    String orderStatus = "Pending";
    String orderDate = java.time.LocalDate.now().toString();

    // Write the order to the file, ensuring idInput and customerName are passed
    String orderEntry = String.join(";", orderID, customerName, itemsOrdered.toString(), 
                                    String.format("%.2f", totalPrice), deliveryOption, 
                                    address, contactNumber, orderStatus, orderDate, 
                                    idInput, vendorID);

    // Writing the order entry to the file
    try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/main/java/com/mycompany/fos_app/Data/orders.txt", true))) {
        writer.write(orderEntry);  // Write the complete order entry
        writer.newLine();  // Ensure it is on a new line

        // Update the order summary label
        ordersummlabel.setText("<html>Items: " + itemsOrdered.toString() + "</html>");

        JOptionPane.showMessageDialog(this, "Order placed successfully!\nTotal: RM" + String.format("%.2f", totalPrice));
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving order!", "Error", JOptionPane.ERROR_MESSAGE);
    }
}


private void updateOrderSummary() {
    int[] selectedRows = itemstable.getSelectedRows();
    if (selectedRows.length == 0) {
        ordersummlabel.setText("No items selected.");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) itemstable.getModel();
    StringBuilder summary = new StringBuilder("<html>");
    double totalPrice = 0.0;

    for (int row : selectedRows) {
        String itemName = model.getValueAt(row, 1).toString();  // Item name
        String priceStr = model.getValueAt(row, 3).toString();  // Item price

        try {
            double price = Double.parseDouble(priceStr);
            totalPrice += price;  // Add to the total price
            summary.append(itemName).append(" - RM").append(String.format("%.2f", price)).append("<br>");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid price format for item: " + itemName);
            return;
        }
    }

    summary.append("<br>Total: RM").append(String.format("%.2f", totalPrice)).append("</html>");
    ordersummlabel.setText(summary.toString());
}

private String getCustomerNameById(String customerId) {
    File file = new File("src/main/java/com/mycompany/fos_app/Data/customer.txt"); // Use the same customer file
    try (Scanner scanner = new Scanner(file)) {
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] parts = line.split(";");
            if (parts.length > 1 && parts[0].equals(customerId)) {
                return parts[1]; // Return the name based on ID
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading customer data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    return "Unknown"; // Default if not found
}



    private String generateOrderID() {
        String lastOrderID = "OR000";
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/com/mycompany/fos_app/Data/orders.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                lastOrderID = line.split(";")[0];
            }
        } catch (IOException e) {
            System.out.println("Warning: Could not read orders.txt. Defaulting to OR000.");
        }
        int numericID = Integer.parseInt(lastOrderID.replaceAll("\\D+", "")) + 1;
        return String.format("OR%03d", numericID);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addtxt;
    private javax.swing.JButton backbtn;
    private javax.swing.JTable itemstable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numbertxt;
    private javax.swing.JComboBox<String> optioncombo;
    private javax.swing.JLabel ordersummlabel;
    private javax.swing.JButton placeorderbtn;
    private javax.swing.JTextField totaltxt;
    private javax.swing.JLabel vendorName;
    // End of variables declaration//GEN-END:variables
}
