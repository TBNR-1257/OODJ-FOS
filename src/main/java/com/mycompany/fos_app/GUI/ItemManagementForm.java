/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.fos_app.GUI;

import java.io.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ItemManagementForm extends javax.swing.JFrame {

    private  DefaultTableModel model = new DefaultTableModel();
    private String[]columnName = {"Item ID", "Name", "Description", "Price(RM)", "Category", "Availability"};
    private int row = -1;
    
    /* Creates new form ItemManagementForm */
    public ItemManagementForm() {
        // Retrieve vendorId from SessionManager
        String vendorId = SessionManager.getInstance().getidInput();
        initComponents(); // Initialize components first!

        model.setColumnIdentifiers(columnName);

        try {
            FileReader fr = new FileReader("src/main/java/com/mycompany/fos_app/Data/menu.txt");
            BufferedReader br = new BufferedReader(fr);
            String line;

            while ((line = br.readLine()) != null) {
                String values[] = line.split(";");

                // Check if the last value in the row matches vendorId
                if (values.length > 0 && values[values.length - 1].equals(vendorId)) {
                    model.addRow(values);
                }
            }

            br.close();
            fr.close();
        } catch (IOException e) {
            e.printStackTrace(); // Print error for debugging
            JOptionPane.showMessageDialog(this, "Error loading file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    private void saveToFile() {
        try {
            File inputFile = new File("src/main/java/com/mycompany/fos_app/Data/menu.txt");
            BufferedReader reader = new BufferedReader(new FileReader(inputFile));

            String vendorId = SessionManager.getInstance().getidInput(); // Get the logged-in vendor's ID
            ArrayList<String> fileData = new ArrayList<>();

            // Read all existing data into an ArrayList
            String line;
            while ((line = reader.readLine()) != null) {
                fileData.add(line);
            }
            reader.close();

            // Create a new list for the updated vendor-specific data
            ArrayList<String> updatedVendorData = new ArrayList<>();

            for (int i = 0; i < model.getRowCount(); i++) {
                StringBuilder row = new StringBuilder();
                for (int j = 0; j < model.getColumnCount(); j++) {
                    row.append(model.getValueAt(i, j).toString()).append(";");
                }
                row.append(vendorId); // Append vendorId as the last column
                updatedVendorData.add(row.toString());
            }

            // Remove the old data of the current vendor from the fileData list
            fileData.removeIf(entry -> entry.endsWith(";" + vendorId));

            // Append the updated vendor data
            fileData.addAll(updatedVendorData);

            // Write everything back to the file
            BufferedWriter writer = new BufferedWriter(new FileWriter(inputFile));
            for (String record : fileData) {
                writer.write(record);
                writer.newLine();
            }
            writer.close();

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }



    public void clearTextField() {
        // Reset fields except ID
        itemIdtxt.setText("");
        nametxt.setText("");
        desctxtarea.setText("");
        pricetxt.setText("");
        categorycbx.setSelectedItem("Food");
        availablecbx.setSelectedItem("Yes");
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        MenuItemsTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        nametxt = new javax.swing.JTextField();
        pricetxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        itemIdtxt = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        availablecbx = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        desctxtarea = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        categorycbx = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MenuItemsTable.setModel(model);
        MenuItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MenuItemsTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(MenuItemsTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(404, 112, -1, 390));

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 479, -1, -1));

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 479, -1, -1));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 479, -1, -1));
        getContentPane().add(nametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 152, 194, -1));
        getContentPane().add(pricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(163, 308, 194, -1));

        jLabel1.setText("Name");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 155, 37, -1));

        jLabel2.setText("Description");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 204, -1, -1));

        jLabel3.setText("Price (RM)");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 311, -1, -1));

        jLabel4.setText("Item ID");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 115, -1, -1));
        getContentPane().add(itemIdtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 112, 194, -1));

        jButton4.setText("<");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 27, 42, 37));

        jLabel5.setText("Availability");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 391, 61, -1));

        availablecbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        getContentPane().add(availablecbx, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 388, 193, -1));

        desctxtarea.setColumns(20);
        desctxtarea.setRows(5);
        jScrollPane2.setViewportView(desctxtarea);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(163, 204, 197, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel6.setText("MENU ITEMS");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(404, 24, -1, -1));

        jLabel7.setText("Category");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 351, -1, -1));

        categorycbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food", "Beverage" }));
        getContentPane().add(categorycbx, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 348, 193, -1));

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 920, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 920, 570));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Retrieve inputs
        String id = itemIdtxt.getText();
        String name = nametxt.getText();
        String description = desctxtarea.getText();
        String priceText = pricetxt.getText();
        String category = (String) categorycbx.getSelectedItem();
        String availability = (String) availablecbx.getSelectedItem();
        String vendorId = SessionManager.getInstance().getidInput();

        if (id.isEmpty() || name.isEmpty() || description.isEmpty() || priceText.isEmpty() || category.isEmpty() || availability.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double price = Double.parseDouble(priceText);
            if (price < 0) {
                JOptionPane.showMessageDialog(this, "Price cannot be negative.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Prevent duplicate IDs for the same vendor
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 0).toString().equals(id)) {
                    JOptionPane.showMessageDialog(this, "Duplicate ID detected!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Add new row to the table
            String[] values = {id, name, description, String.valueOf(price), category, availability};
            model.addRow(values);

            // Save updated data
            saveToFile();
            clearTextField();
            JOptionPane.showMessageDialog(this, "Record added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid price format. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to edit");
        } else {
            String id = itemIdtxt.getText();
            String name = nametxt.getText();
            String priceText = pricetxt.getText();
            String description = desctxtarea.getText();
            String category = (String) categorycbx.getSelectedItem();
            String availability = (String) availablecbx.getSelectedItem();

            if (id.isEmpty() || name.isEmpty() || description.isEmpty() || priceText.isEmpty() || category.isEmpty() || availability.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            } else {
                try {
                    double price = Double.parseDouble(priceText);
                    if (price < 0) {
                        JOptionPane.showMessageDialog(this, "Price cannot be negative.");
                        return;
                    }

                    // Update the selected row
                    model.setValueAt(name, row, 1);
                    model.setValueAt(description, row, 2);
                    model.setValueAt(price, row, 3);
                    model.setValueAt(category, row, 4);
                    model.setValueAt(availability, row, 5);

                    // Save changes to file
                    saveToFile();
                    clearTextField();
                    JOptionPane.showMessageDialog(this, "Record edited successfully!");
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid price. Please enter a valid number.");
                }
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to delete ");
        } else {
            int response = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                model.removeRow(row);
                row = -1;
                saveToFile();
                clearTextField();
                JOptionPane.showMessageDialog(this, "Record deleted successfully!");
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void MenuItemsTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuItemsTableMouseReleased
        // Get the selected row from the table
        row = MenuItemsTable.getSelectedRow();

        // Check if a row is selected
        if (row != -1) {
            // Create an AddMenuItem object using the selected row's data
            AddMenuItem itemRecord = new AddMenuItem(
                String.valueOf(model.getValueAt(row, 0)), // Item ID
                String.valueOf(model.getValueAt(row, 1)), // Name
                String.valueOf(model.getValueAt(row, 2)), // Description
                Double.parseDouble(String.valueOf(model.getValueAt(row, 3))), // Price
                String.valueOf(model.getValueAt(row, 4)),  // Category
                String.valueOf(model.getValueAt(row, 5))  // Availability (String)
            );

            // Populate the text fields and combo box with the selected item's details
            itemIdtxt.setText(itemRecord.getItemId());
            nametxt.setText(itemRecord.getName());
            pricetxt.setText(String.valueOf(itemRecord.getPrice()));
            desctxtarea.setText(itemRecord.getDescription());
            categorycbx.setSelectedItem(itemRecord.getCategory());
            availablecbx.setSelectedItem(itemRecord.getAvailability());
        }

    }//GEN-LAST:event_MenuItemsTableMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        VendorDashboardForm vdf = new VendorDashboardForm();
        this.dispose();
        vdf.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemManagementForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MenuItemsTable;
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<String> availablecbx;
    private javax.swing.JComboBox<String> categorycbx;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea desctxtarea;
    private javax.swing.JTextField itemIdtxt;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nametxt;
    private javax.swing.JTextField pricetxt;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
