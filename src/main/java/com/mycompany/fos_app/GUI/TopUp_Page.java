/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.fos_app.GUI;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.*;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

/**
 *
 * @author User
 */
public class TopUp_Page extends javax.swing.JFrame {

    /**
     * Creates new form TopUp_Page
     */
    public TopUp_Page() {
        initComponents();
        loadCustomerIDs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        custComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        balanceLb = new javax.swing.JLabel();
        topUpTxt = new javax.swing.JTextField();
        confirmBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        custComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        custComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Montserrat Black", 2, 18)); // NOI18N
        jLabel1.setText("Current Balance");

        balanceLb.setFont(new java.awt.Font("Montserrat Black", 0, 18)); // NOI18N
        balanceLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        balanceLb.setText("0.00");

        topUpTxt.setText("Input Amount Here...");
        topUpTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topUpTxtActionPerformed(evt);
            }
        });

        confirmBtn.setText("Confirm");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(backBtn)
                        .addGap(135, 135, 135)
                        .addComponent(confirmBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(custComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(balanceLb, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(topUpTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(147, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(custComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(balanceLb, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(topUpTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(confirmBtn))
                .addGap(61, 61, 61))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadCustomerIDs() {
        String filename = "src/main/java/com/mycompany/fos_app/Data/customer.txt";

        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            custComboBox.removeAllItems(); // Clear existing items
            boolean hasCustomers = false;

            while ((line = br.readLine()) != null) {
                String[] data = line.split(";");
                if (data.length > 0) {
                    custComboBox.addItem(data[0]); // Add customer ID to combo box
                    hasCustomers = true;
                }
            }

            if (hasCustomers) {
                custComboBox.setSelectedIndex(0); // Select first item after loading
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading customers: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String[] getCustomerData(String customerID) {
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/com/mycompany/fos_app/Data/customer.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(";");
                if (data[0].equals(customerID)) { 
                    return data;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }
    
    private void updateCustomerBalance(String customerID, double amount) {
        String filename = "src/main/java/com/mycompany/fos_app/Data/customer.txt";
        List<String> updatedLines = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            boolean found = false;

            while ((line = br.readLine()) != null) {
                String[] data = line.split(";");
                if (data.length >= 4 && data[0].equals(customerID)) {
                    double currentBalance = Double.parseDouble(data[3]); // Assuming balance is at index 3
                    double newBalance = currentBalance + amount;
                    data[3] = String.valueOf(newBalance); // Update balance
                    found = true;
                }
                updatedLines.add(String.join(";", data)); // Store updated line
            }

            if (!found) {
                System.out.println("Customer not found: " + customerID);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        // Write the updated content back to the file
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename))) {
            for (String updatedLine : updatedLines) {
                bw.write(updatedLine);
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    
    public class TransactionHandler {

        public static String generateTransactionId() {
            String filename = "src/main/java/com/mycompany/fos_app/Data/transactions.txt";
            int lastTransactionNumber = 1000; // Default starting point

            try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
                String line, lastLine = null;
                while ((line = br.readLine()) != null) {
                    lastLine = line; // Get the last transaction line
                }

                if (lastLine != null) {
                    String[] data = lastLine.split(";");
                    lastTransactionNumber = Integer.parseInt(data[0].substring(1)) + 1;
                }
            } catch (IOException | NumberFormatException e) {
                // If there's an error, we just start from T1000
            }

            return "T" + lastTransactionNumber;
        }

        public static void processTransaction(String customerID, double amount) {
            String transactionID = generateTransactionId();

            logTransaction(transactionID, customerID, amount);
            generateTransactionReceipt(transactionID, customerID, amount);
            sendNotification(customerID, "Your top-up of RM " + amount + " was successful. Transaction ID: " + transactionID);
        }

        private static void logTransaction(String transactionID, String customerID, double amount) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("src/main/java/com/mycompany/fos_app/Data/transactions.txt", true))) {
                String logEntry = transactionID + ";" + customerID + ";" + amount + ";" + new java.util.Date();
                bw.write(logEntry);
                bw.newLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private static void generateTransactionReceipt(String transactionID, String customerID, double amount) {
            String receiptFileName = "src/main/java/com/mycompany/fos_app/Receipts/" + transactionID + ".pdf";

            try (PDDocument document = new PDDocument()) {
                PDPage page = new PDPage();
                document.addPage(page);

                PDPageContentStream contentStream = new PDPageContentStream(document, page);
                contentStream.setFont(PDType1Font.HELVETICA_BOLD, 14);
                contentStream.beginText();
                contentStream.newLineAtOffset(100, 700);

                // Receipt Header
                contentStream.showText("Food Ordering System - Transaction Receipt");
                contentStream.newLineAtOffset(0, -20);

                // Transaction Details
                contentStream.setFont(PDType1Font.HELVETICA, 12);
                contentStream.showText("Transaction ID: " + transactionID);
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Customer ID: " + customerID);
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Amount: RM " + amount);
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Date: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));

                contentStream.endText();
                contentStream.close();

                document.save(receiptFileName);
                System.out.println("Receipt generated: " + receiptFileName);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private static void sendNotification(String customerID, String message) {
            String notificationFile = "src/main/java/com/mycompany/fos_app/Data/notifications.txt";

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(notificationFile, true))) {
                String logEntry = customerID + ";" + message + ";" + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
                bw.write(logEntry);
                bw.newLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    
    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        // TODO add your handling code here:
        String customerID = custComboBox.getSelectedItem().toString();
        double amount;

        try {
            amount = Double.parseDouble(topUpTxt.getText());

            if (amount <= 0) {
                JOptionPane.showMessageDialog(this, "Amount must be greater than 0!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Update the credit balance in customertxt file
            updateCustomerBalance(customerID, amount);

            // **Process the transaction after updating balance**
            TransactionHandler.processTransaction(customerID, amount);

            JOptionPane.showMessageDialog(this, "Top-up successful for " + customerID, "Success", JOptionPane.INFORMATION_MESSAGE);

            // Refresh balance label after update
            String[] customerData = getCustomerData(customerID);
            if (customerData != null) {
                balanceLb.setText(customerData[3]); // Update displayed balance
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid amount! Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_confirmBtnActionPerformed

    private void topUpTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topUpTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_topUpTxtActionPerformed

    private void custComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custComboBoxActionPerformed
        // TODO add your handling code here:
        if (custComboBox.getSelectedItem() == null) {
            return; // Prevents NullPointerException if no item is selected
        }

        String selectedCustomer = custComboBox.getSelectedItem().toString();
        String[] customerData = getCustomerData(selectedCustomer);

        if (customerData != null) {
            balanceLb.setText(customerData[3]); // Assuming balance is at index 3
        } else {
            balanceLb.setText("N/A");
        }
    }//GEN-LAST:event_custComboBoxActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Close current window
        new Admin_Dashboard().setVisible(true); // Open Admin Dashboard
    }//GEN-LAST:event_backBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TopUp_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TopUp_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TopUp_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TopUp_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TopUp_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel balanceLb;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JComboBox<String> custComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField topUpTxt;
    // End of variables declaration//GEN-END:variables
}
